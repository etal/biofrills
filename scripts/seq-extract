#!/usr/bin/env python

"""Extract a range of columns from an alignment.

Usage:
    seq-extract [infile] <range>
    
where <range> resembles: '1-5,10-20,34,35,40-'

Uses 1-based counting for column positions.
"""

from Bio import AlignIO


def _parse_position(text):
    if text.isdigit():
        pos = int(text) - 1
        if pos < 0:
            raise ValueError("Position must be at least 1; got " + text)
        return slice(pos, pos + 1)

    # ENH: allow ranges like "2:4"
    if not text.count('-') == 1:
        raise ValueError("String must resemble: '1', '2-4', '5-'")

    left, right = text.split('-')
    if left == '':
        left = 0
    else:
        left = int(left) - 1
        if left < 0:
            raise ValueError("Range must start from at least 1; got " + text)
    if right == '':
        return slice(left, None)
    else:
        right = int(right)
        assert right > left
        return slice(left, right)


def parse_positions(text):
    """Convert a string of 1-based positions & ranges to Python.

    Return a list of integers and slices (0-based indexing).

    Example:
    >>> parse_range("6,7,10-20,25-")
    [5,6,(9,20),(24,)]
    """
    return [_parse_position(pos) for pos in text.split(',')]


if __name__ == '__main__':
    import sys
    args = sys.argv[1:]

    fmt = 'fasta'
    if args[0] == '-f':
        fmt = args[1]
        args = args[2:]

    if len(args) == 1:
        infile = sys.stdin
        positions = args[0]
    elif len(args) == 2:
        infile = args[0]
        positions = args[1]
    else:
        sys.exit(__doc__)

    aln = AlignIO.read(infile, fmt)
    indices = parse_positions(positions)
    # TODO: select columns from aln
    first, rest = indices[0], indices[1:]
    out = aln[:,first]
    for index in rest:
        out += aln[:,index]

    AlignIO.write(out, sys.stdout, fmt)

